#!/bin/bash

# =====================
# Beginning of the menu
# =====================

# Initialize the menu
menu[0]="Find the function y=ax+b using the coordinates of two points."
menu[1]=" "
menu[2]=" "

function PrintMenu () {
	printf "\n"
	printf "\tVisualize My Math\n"
	printf "\t=================\n"
	printf "\n"
	printf "\t1. ${menu[0]}\n"
	printf "\n"
	#printf "\t2. ${menu[1]}\n"
	#printf "\t3. ${menu[2]}\n"
}

# Print the menu
PrintMenu
while printf "Enter: "; read input; 
(test -z $input || test $input != q); do 

	# Select an option from the menu
	case $input in
		1) echo hello world
		   echo yay yay
		   echo yes yes;;
		2) echo heello world 2;;
	esac

done

# =============================
# Beginning of the 1st function
# =============================

# Visualize using - / \

# June 6, 2022
# I was thinking about why a slope is change in y over change in x
# and not the other way around: change in x over change in y.
# I think it could be defined other way -- it could just be a convention.
# Anyways, this is not my main point. I was thinking about
# how to visualize what it means to be a slope.

# how to visualize change in y over change in x?
# I imagined a graph, the one I got on EdX. The first quesiton.
# I seperated the change in y as a single one dimensional line.
# x as another single one dimensional line.
# I laid the y line to x line, so that they can overlap with each other.

# It looked like change in y - change in x.
# How then can I imagine change in y divided by change in x?
# I realized that division could also be imagined in a similar way.
# Here's my main point. Division can be visualized by
# overlapping the two one dimensional lines of y and x.
# Whereas subtraction is just overlapping two,
# division is multiplying the latter until the former can't be subtracted anymore.

# Plus,
# notice how the slope looks very similar to calclus differentiation.
# oh wait, are they of the same class?
# If then, it will be logical for me to start my visualization journey
# with slope and then connect this dot with differentiation.

# On square roots
# why is sqrt(x) equal to x^(1/2)
# is it because square root is defined such that
# sqrt(x) = y; y^2 = x? because this leads to
# y^2 = x^1 = x^(2/2)

# On Logarithms
# I can't prove how, but here's one way you can understand logs.
# log(a)+log(b)=log(ab) because for instance 10*10*10=10^1+10^3

# On what I forgot
# Also, on what I'd like to do whenever I have nothing on my hand to do:
# Visualize what functions look like. y=x^ y=sqrt(x)
# y=sqrt(4-x^2) y=sqrt(4-x) y=x^-1 y=x^-2

# June 9, 2022
# Holy shit
# unit circle. i should study it more.
# i watched a YouTube video on it
# Understand trig in five min. the video said
# anyways, my point is that in a unit circle, in which
# the radius is 1, we can understand a lot about trigonometry.
# 1. The circumference is 2pi*r, but in unit circle in which
#    the radius is 1, the circumference is 2pi.
# 2. Since sin(x) = opposite / hyp, and hyp is 1, 
#    sin(x) = opposite. Imagine in your head. It's a vertical line.
#    This means that it can be also a y coordinate.
# 3. Since cos(x) = adjacent / hyp, and hyp is 1,
#    cos(x) = adjacent. It's a horizontal line, a x coordinate.
#    Remember that a full circle's circumference is 2pi?
#    Then, you can visalize why and how - at 1pi - 
#    cos(x) is 1, and sin(x) is 0, etc.
# 4. The last point, which surprized me the most:
#    Since tan(x) = opposite / adjacent, 
#    tan(x) = y/x, which is slope. Can you see the relevance to
#    the word tangent line? 
#    Also, tan(x) = sin(x) / cos(x) because
#    as we saw previously opposite is sin(x) and
#    adjacent is cos(x).

# ========================
# Notes I might need later
# ========================

# white (($input==1)); do echo try again; read input; done

# case for each input. each consequent commands are in the form
# of functions

# 'if' construct
# Example: `if ((2+3==5)); then echo 'hello world'; fi`

# echo $((1+1)) 

# Initialize an index
# example_index[0]=0
# example_index[1]=2
# example_index[2]=4
# example_index=(0 2 4)
# echo ${example_index[0]}
# echo ${example_index[*]}

# Remove the index
# unset example_index

###
# June 3, 2022
# Learned about git using `info gittutorial'.
# summary of what i learned today:
# ```
# git init
# git add readme.md
# git commit -am 'description'
# git push
#
# git status
# git diff
# ```
###

###
# june 4, 2022 
# shell scripts can have the file extension of `.sh` but it can 
# be more useful to leave it without any extension. instead, 
# just put the shebang `#!/bin/bash` at the first one.  
# plus, use `chmod +x` to make this script executable.
#
# also, apparently, this convention called shebang is not used
# on windows. `.sh` convention is used in windows. since i'm using
# fedora, i'm going to stick to the shebang convention.
#
# source: https://stackoverflow.com/questions/27813563/what-is-the-bash-file-extension
###

###
# June 21, 2022
# For my Calc II midterm exam, I needed a proctor service.
# So, I was filling out the Examination Proctor Agreement form,
# which was a pdf. However, okular, the default pdf viewer for
# Fedora happens to have a not-so-perfect annotation functionality.
# The annotations I make in okular would not be visible in any
# other software than okular itself. So, I tried to find
# pdf editing softwares with good annotation functionality.
# Here's what I found and used and liked: xournal
# 
# sudo dnf install -y xournal
# 

# by the way, you can copy something on to the clipboard on vim 
# and then paste it onto another console by
# ```
# v
# "+y
# ctrl+shift+v
# ```
# this functionality is not available on normal vim though.
# on fedora, you can use this functionality by installing
# `vimx` and - of course - by using vimx to edit the files.

# I am so glad to have found the "top of the INFO tree."
# It has documentations for everything, including
# core file manipulation, Gzip, grep, etc.
# `info '(dir)Top'`, or `info bash` and 'u'.

# *cut* command
# This command is useful for filtering data.
# `who | cut -c 1-8' outputs the first eight characters.
# 'who | cut -d' ' -f1,2' sets the delimiter as ' ' and
# outputs the first and second columns.

# *sort* command
# Example: 'who | cut -d' ' -f2 | sort -r' outputs
# the data in the reversed order.

# *uniq* command
# Example: 'who | cut -d' ' -f1 | uniq' removes
# all the dulplicates and outputs only the unique data.


