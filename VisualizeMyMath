#!/bin/bash

###
# June 3, 2022
# Learned about git using `info gittutorial'.
# summary of what i learned today:
# ```
# git init
# git add readme.md
# git commit -am 'description'
# git push
#
# git status
# git diff
# ```
###

###
# june 4, 2022 
# shell scripts can have the file extension of `.sh` but it can 
# be more useful to leave it without any extension. instead, 
# just put the shebang `#!/bin/bash` at the first one.  
# plus, use `chmod +x` to make this script executable.
#
# also, apparently, this convention called shebang is not used
# on windows. `.sh` convention is used in windows. since i'm using
# fedora, i'm going to stick to the shebang convention.
#
# source: https://stackoverflow.com/questions/27813563/what-is-the-bash-file-extension
###

# by the way, you can copy something on to the clipboard on vim 
# and then paste it onto another console by
# ```
# v
# "+y
# ctrl+shift+v
# ```
# this functionality is not available on normal vim though.
# on fedora, you can use this functionality by installing
# `vimx` and - of course - by using vimx to edit the files.

# I am so glad to have found the "top of the INFO tree."
# It has documentations for everything, including
# core file manipulation, Gzip, grep, etc.
# `info '(dir)Top'`, or `info bash` and 'u'.

# *cut* command
# This command is useful for filtering data.
# `who | cut -c 1-8' outputs the first eight characters.
# 'who | cut -d' ' -f1,2' sets the delimiter as ' ' and
# outputs the first and second columns.

# *sort* command
# Example: 'who | cut -d' ' -f2 | sort -r' outputs
# the data in the reversed order.

# *uniq* command
# Example: 'who | cut -d' ' -f1 | uniq' removes
# all the dulplicates and outputs only the unique data.

# Initialize the menu
menu[0]="Find the function y=ax+b using the coordinates of two points."
menu[1]=" "
menu[2]=" "

function PrintMenu () {
	printf "\n"
	printf "\tVisualize My Math\n"
	printf "\t=================\n"
	printf "\n"
	printf "\t1. ${menu[0]}\n"
	printf "\n"
	#printf "\t2. ${menu[1]}\n"
	#printf "\t3. ${menu[2]}\n"
}

# Print the menu
PrintMenu
while printf "Enter: "; read input; 
(test -z $input || test $input != q); do 

	# Select an option from the menu
	case $input in
		1) echo hello world
		   echo yay yay
		   echo yes yes;;
		2) echo heello world 2;;
	esac

done


# white (($input==1)); do echo try again; read input; done

# case for each input. each consequent commands are in the form
# of functions

# 'if' construct
# Example: `if ((2+3==5)); then echo 'hello world'; fi`

# echo $((1+1)) 

# Initialize an index
# example_index[0]=0
# example_index[1]=2
# example_index[2]=4
# example_index=(0 2 4)
# echo ${example_index[0]}
# echo ${example_index[*]}

# Remove the index
# unset example_index
